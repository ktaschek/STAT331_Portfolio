---
title: "STAT 331 Portfolio"
author: "Kyle Taschek"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

Lab 2 Question 1

```{r}
#| label: wd-1-csv

survey_csv <- read_csv(here::here("data","surveys.csv"), show_col_types = FALSE)

```

-   `xlsx`

PA 4 Question 1

```{r}
#| label: wd-1-xlsx

military <- read_xlsx(here("data", "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

```

-   `txt`

Check-in 2.3

```{r}
#| label: wd-1-txt

# modified to follow tidiness conventions

ages_mystery <- read_delim(
  here::here(
    "Week 2",
    "Check-ins",
    "Ages_Data",
    "ages_mystery.txt"
    ),
  delim = "|"
  )

```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Question 5

```{r}
#| label: wd-2

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex
         ) |>
  mutate(
    course_id = as.factor(course_id),
    teacher_id = as.factor(teacher_id),
    sex = as.factor(sex),
    academic_degree = as.factor(academic_degree),
    question_no = as.integer(question_no)
  ) |>
  filter(no_participants >= 10)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 Question 5

```{r}
#| label: wd-3-numeric

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex
         ) |>
  mutate(
    course_id = as.factor(course_id),
    teacher_id = as.factor(teacher_id),
    sex = as.factor(sex),
    academic_degree = as.factor(academic_degree),
    question_no = as.integer(question_no)
  ) |>
  filter(no_participants >= 10)
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-3-string

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

suspect_id

```

-   factor

```{r}
#| label: wd-3-factor

```

-   date (example must use functions from **lubridate**)

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-3-date

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

Lab 4 Question 3

```{r}
#| label: wd-4-factor

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
    "Superior California" = c(
      "Butte",
      "Colusa",
      "El Dorado",
      "Glenn",
      "Lassen",
      "Modoc",
      "Nevada",
      "Placer",
      "Plumas",
      "Sacramento",
      "Shasta",
      "Sierra",
      "Siskiyou",
      "Sutter",
      "Tehama",
      "Yolo",
      "Yuba"
      ),
    "North Coast" = c(
      "Del Norte",
      "Humboldt",
      "Lake",
      "Mendocino",
      "Napa",
      "Sonoma",
      "Trinity"
      ),
    "San Francisco Bay Area" = c(
      "Alameda",
      "Contra Costa",
      "Marin",
      "San Francisco",
      "San Mateo",
      "Santa Clara",
      "Solano"
      ),
    "Northern San Joaquin Valley" = c(
      "Alpine",
      "Amador",
      "Calaveras",
      "Madera",
      "Mariposa",
      "Merced",
      "Mono",
      "San Joaquin",
      "Stanislaus",
      "Tuolumne"
      ),
    "Central Coast" = c(
      "Monterey",
      "San Benito",
      "San Luis Obispo",
      "Santa Barbara",
      "Santa Cruz",
      "Ventura"
      ),
    "Southern San Joaquin Valley" = c(
      "Fresno",
      "Inyo",
      "Kern",
      "Kings",
      "Tulare"
      ),
    "Inland Empire" = c(
      "Riverside",
      "San Bernardino"
      ),
    "Los Angeles County" = c(
      "Los Angeles"
      ),
    "Orange County" = c(
      "Orange"
      ),
    "San Diego-Imperial" = c(
      "Imperial",
      "San Diego"
      )
  )) |> 
  mutate(region = as.factor(region))

```

-   date (example must use functions from **lubridate**)

PA 5 Question 3

```{r}
#| label: wd-4-date

# modified to follow tidiness conventions

suspects_modified <- suspects_modified |>
  mutate(DOW = wday(
    Time.Spotted,
    label = TRUE,
    abbr = FALSE
    )) |>
  filter(!(DOW %in% c(
    "Tuesday", "Thursday"
    )))

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-5-left

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-5-inner

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

Lab 4 Question 6

```{r}
#| label: wd-7-long

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   `pivot_wider()`

Lab 4 Question 4

```{r}
#| label: wd-7-wide

# modified to follow tidiness conventions

ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(
    region,
    study_year
    ) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi,
              names_glue = "mhi_{study_year}") |>
  arrange(desc(mhi_2018))

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

Labs 1-5

Challenges 1-3

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example



```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

Lab 2 Question 4

```{r}
#| label: dvs-1-num

ggplot(data = survey_csv) +
  geom_point(mapping = aes(x = weight,
                           y = hindfoot_length
                           ),
             alpha = 0.3,
             position = "jitter") + 
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y = "",
       title = "Relationship Between Hindfoot Length and Weight Across Species in Portal, Arizona",
       subtitle = "Hindfoot Length (mm)")

```

-   at least one numeric variable and one categorical variable

Lab 2 Question 16

```{r}
#| label: dvs-2-num-cat

# modified to follow tidiness conventions

ggplot(data = survey_csv,
       mapping = aes(
         y = species,
         x = weight
         )) +
  geom_jitter(
    color = "orange3",
    alpha = 0.7,
    show.legend = FALSE
    ) +
  geom_boxplot(outlier.alpha = 0) +
  labs(
    x = "Weight (g)",
    y = " ",
    title = "Comparison of Weight Distribution Across Different Species of Rodent from Portal, Arizona"
  )

```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

Lab 2 Question 16

```{r}
#| label: dvs-2-1

# modified to follow tidiness conventions

ggplot(data = survey_csv,
       mapping = aes(
         y = species,
         x = weight
         )) +
  geom_jitter(
    color = "orange3",
    alpha = 0.7,
    show.legend = FALSE
    ) +
  geom_boxplot(outlier.alpha = 0) +
  labs(
    x = "Weight (g)",
    y = " ",
    title = "Comparison of Weight Distribution Across Different Species of Rodent from Portal, Arizona"
  )

```

-   I can modify the text in my plot to be more readable

Lab 4 Question 6

```{r}
#| label: dvs-2-2

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   I can reorder my legend to align with the colors in my plot

Lab 4 Question 6

```{r}
#| label: dvs-2-3

# modified to relect the "growing" changes requested:
# 1. plot color reordering,
# 2. factor with forcats
# 3. fix text size issues

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(
    age_group = fct_recode(
      age_group,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"
    ),
   age_group = fct_relevel(
     age_group,
     "Infant",
     "Toddler",
     "Preschool"
    )
   ) |>
  # Graphing 
  ggplot(mapping = aes(
    x = study_year,
    y = price_per_week,
    color = fct_reorder2(
      .f = region,
      .x = study_year,
      .y = price_per_week
    )
  )) +
  geom_point(position = "jitter",
             alpha = 0.5,
             size = 0.8) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)",
    color = "California Region"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6)),
    plot.title = element_text(size = 12)
  )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

Challenge 2 Question 2

```{r}
#| label: dvs-3-1

# modified to follow tidiness conventions

ggplot(data = survey_csv) +
  geom_density_ridges(
    mapping = aes(
      x = weight,
      y = species,
      fill = species),
    alpha = 0.5
    ) +
  scale_fill_viridis_d() +
  labs(
    x = "Species",
    y = " ",
    subtitle = "Weight (g)",
    title = "Comparison of Weight Distribution Across Species from Portal, Arizona"
  )

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

Lab 4 Question 4

```{r}
#| label: dvs-4-summarize

ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi,
              names_glue = "mhi_{study_year}") |>
  arrange(desc(mhi_2018))

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1



```

-   Example 2

```{r}
#| label: dvs-5-2

# modified name to be unique_techer_courses (from teacher_course)



```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

lab 3 Question 6

```{r}
#| label: dvs-6-1


teacher_evals_clean |>
  summarise(unique_teachers = n_distinct(teacher_id),
            unique_courses = n_distinct(course_id),
            unique_combinations = n_distinct(course_id,teacher_id))

```

-   Example 2

lab 3 Question 9

```{r}
#| label: dvs-6-2

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(question_count = n_distinct(question_no), .groups = "drop") |>
  filter(question_count == 9) |>
  count() |>
  rename(unique_teacher_course = n)

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1



```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

Lab 5 (Find who hired the suspect step)

```{r}
#| label: pe-1-one-call

# Exemplified by filter function

employer_id <- person |>
  inner_join(
    facebook_event_checkin,
    join_by(id == person_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    gender == "female",
    height %in% c(65:67),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(ymd(date)) == 12,
    year(ymd(date)) == 2017
  ) |>
  group_by(id) |>
  summarize(concert_count = n()) |>
  filter(concert_count == 3) |>
  pull(id)


```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

Challenge 3 Question 3

```{r}
#| label: pe-4-1

tab <- table(
  teacher_evals_compare$SET_level,
  teacher_evals_compare$sen_level
)

chisq.test(tab)

```

-   I can connect a data wrangling pipeline into a `ggplot()`

Lab 4 Question 6

```{r}
#| label: pe-4-2

# modified to relect the "growing" changes requested:
# 1. plot color reordering,
# 2. factor with forcats
# 3. fix text size issues

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(
    age_group = fct_recode(
      age_group,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"
    ),
   age_group = fct_relevel(
     age_group,
     "Infant",
     "Toddler",
     "Preschool"
    )
   ) |>
  # Graphing 
  ggplot(mapping = aes(
    x = study_year,
    y = price_per_week,
    color = fct_reorder2(
      .f = region,
      .x = study_year,
      .y = price_per_week
    )
  )) +
  geom_point(position = "jitter",
             alpha = 0.5,
             size = 0.8) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)",
    color = "California Region"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6)),
    plot.title = element_text(size = 12)
  )

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

Lab 2 Question 17

```{r}
#| label: dsm-2-1

species_mod <- aov(weight ~ species, data = survey_csv)

```

-   Example 2

Challenge 3 Question 3

```{r}
#| label: dsm-2-2

tab <- table(
  teacher_evals_compare$SET_level,
  teacher_evals_compare$sen_level
)

chisq.test(tab)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
