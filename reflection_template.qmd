---
title: "STAT 331 Portfolio"
author: "Kyle Taschek"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

Lab 2 Question 1

```{r}
#| label: wd-1-csv

survey_csv <- read_csv(here::here("data","surveys.csv"), show_col_types = FALSE)

```

-   `xlsx`

PA 4 Question 1

```{r}
#| label: wd-1-xlsx

military <- read_xlsx(here("data", "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

```

-   `txt`

Check-in 2.3

```{r}
#| label: wd-1-txt
# REVISIONS:
# modified to follow tidiness conventions

ages_mystery <- read_delim(
  here::here(
    "Week 2",
    "Check-ins",
    "Ages_Data",
    "ages_mystery.txt"
    ),
  delim = "|"
  )

```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Question 5

```{r}
#| label: wd-2

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex
         ) |>
  mutate(
    course_id = as.factor(course_id),
    teacher_id = as.factor(teacher_id),
    sex = as.factor(sex),
    academic_degree = as.factor(academic_degree),
    question_no = as.integer(question_no)
  ) |>
  filter(no_participants >= 10)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 Question 5

```{r}
#| label: wd-3-numeric

teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex
         ) |>
  mutate(
    course_id = as.factor(course_id),
    teacher_id = as.factor(teacher_id),
    sex = as.factor(sex),
    academic_degree = as.factor(academic_degree),
    question_no = as.integer(question_no)
  ) |>
  filter(no_participants >= 10)
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-3-string

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

suspect_id

```

-   factor

Lab 4 Question 2

```{r}
#| label: wd-3-factor

ca_childcare <- childcare_costs |>
  left_join(
    y = counties,
    by = join_by(county_fips_code == county_fips_code)
  ) |>
  filter(state_name == "California")

ca_childcare

```

-   date (example must use functions from **lubridate**)

Lab 5 (My step 5: Find who hired the suspect)

```{r}
#| label: wd-3-date

# REVISIONS:
# modified to meet efficiency conventions

employer_id <- person |>
  inner_join(
    facebook_event_checkin,
    join_by(id == person_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    gender == "female",
    height %in% 65:67,
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(ymd(date)) == 12,
    year(ymd(date)) == 2017
  ) |>
  group_by(id) |>
  summarize(concert_count = n()) |>
  filter(concert_count == 3) |>
  pull(id)

employer_id

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

Challenge 3 Q2

```{r}
#| label: wd-4-numeric

teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
         sen_level = if_else(seniority <=4, "junior", "senior")) |>
  select(
    course_id,
    SET_level,
    sen_level
  )
```

-   character -- specifically a string (example must use functions from **stringr**)

Lab 5 (Find witnesses)

```{r}
#| label: wd-4-string

# REVISION:
# mutated person dataframe to stop abbreviating Drive and Avenue

# Finding id of witness 1 given the crime description

person <- person |>
  mutate(
    address_street_name = str_replace(address_street_name, 'Dr$', 'Drive'),
    address_street_name = str_replace(address_street_name, 'Ave$', 'Avenue'),
  ) 

person |>
  filter(
    address_street_name == "Northwestern Drive",
  ) |>
  slice_max(address_number) |>
  pull(id)

# Finding id of witness 2 given the crime description
person |>
  filter(
    str_detect(name, "Annabel"),
    address_street_name == "Franklin Avenue"
  ) |>
  pull(id)


```

-   factor (example must use functions from **forcats**)

Lab 4 Question 3

```{r}
#| label: wd-4-factor

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
    "Superior California" = c(
      "Butte",
      "Colusa",
      "El Dorado",
      "Glenn",
      "Lassen",
      "Modoc",
      "Nevada",
      "Placer",
      "Plumas",
      "Sacramento",
      "Shasta",
      "Sierra",
      "Siskiyou",
      "Sutter",
      "Tehama",
      "Yolo",
      "Yuba"
      ),
    "North Coast" = c(
      "Del Norte",
      "Humboldt",
      "Lake",
      "Mendocino",
      "Napa",
      "Sonoma",
      "Trinity"
      ),
    "San Francisco Bay Area" = c(
      "Alameda",
      "Contra Costa",
      "Marin",
      "San Francisco",
      "San Mateo",
      "Santa Clara",
      "Solano"
      ),
    "Northern San Joaquin Valley" = c(
      "Alpine",
      "Amador",
      "Calaveras",
      "Madera",
      "Mariposa",
      "Merced",
      "Mono",
      "San Joaquin",
      "Stanislaus",
      "Tuolumne"
      ),
    "Central Coast" = c(
      "Monterey",
      "San Benito",
      "San Luis Obispo",
      "Santa Barbara",
      "Santa Cruz",
      "Ventura"
      ),
    "Southern San Joaquin Valley" = c(
      "Fresno",
      "Inyo",
      "Kern",
      "Kings",
      "Tulare"
      ),
    "Inland Empire" = c(
      "Riverside",
      "San Bernardino"
      ),
    "Los Angeles County" = c(
      "Los Angeles"
      ),
    "Orange County" = c(
      "Orange"
      ),
    "San Diego-Imperial" = c(
      "Imperial",
      "San Diego"
      )
  )) |> 
  mutate(region = as.factor(region))

```

-   date (example must use functions from **lubridate**)

Lab 5 (find who hired suspect step)

```{r}
#| label: wd-4-date

# REVISIONS:
# modified to meet efficiency conventions

# Exemplified by filter function

employer_id <- person |>
  inner_join(
    facebook_event_checkin,
    join_by(id == person_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    gender == "female",
    height %in% 65:67,
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(ymd(date)) == 12,
    year(ymd(date)) == 2017
  ) |>
  group_by(id) |>
  summarize(concert_count = n()) |>
  filter(concert_count == 3) |>
  pull(id)

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-5-left

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

```

-   `right_join()`

Lab 4 Question 2

```{r}
#| label: wd-5-right

# REVISIONS:
# modified from lab 4 to to satisfy requirement

ca_childcare <- counties |>
  right_join(
    y = childcare_costs,
    by = join_by(county_fips_code == county_fips_code)
  ) |>
  filter(state_name == "California")

ca_childcare

```

-   `inner_join()`

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-5-inner

renamed_get_fit_now_member <-get_fit_now_member |>
      rename(membership_id = id)

suspect_id <- person |>
  inner_join(
    renamed_get_fit_now_member,
    join_by(id == person_id)
  ) |>
  left_join(
    get_fit_now_check_in,
    join_by(membership_id == membership_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    ymd(check_in_date) == ymd(20180109),
    membership_status == "gold",
    str_detect(plate_number, "H42W"),
    str_starts(membership_id, "48Z"),
    gender == "male"
  ) |>
  pull(id)

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

Lab 5 Question 1 (My step 3: 'Find suspect using the given hints from the transcript")

```{r}
#| label: wd-6-semi

# REVISIONS:
# modified to better match requirements
# replaced height = c(65:67) filter condition with semi_join function

suspect_heights <- tibble(
  height = 65:67
)
employer_id <- person |>
  inner_join(
    facebook_event_checkin,
    join_by(id == person_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  semi_join(
    suspect_heights,
    by = "height"
  ) |>
  filter(
    gender == "female",
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(ymd(date)) == 12,
    year(ymd(date)) == 2017
  ) |>
  group_by(id) |>
  summarize(concert_count = n()) |>
  filter(concert_count == 3) |>
  pull(id)

employer_id

```

-   `anti_join()`

Lab 3 Question 10

```{r}
#| label: wd-6-anti

# REVISIONS:
# modified to better match requirements
# replace filter(question_no == 901) with anti_join function

excluded_questions <- tibble(
  question_no = 902:909
)
teacher_evals_clean |>
  group_by(teacher_id) |>
  anti_join(
    excluded_questions,
    by = "question_no"
  ) |>
  summarize(avg_q1_score = mean(SET_score_avg), .groups="drop") |>
  filter(avg_q1_score == min(avg_q1_score) |
            avg_q1_score == max(avg_q1_score))

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

Lab 4 Question 6

```{r}
#| label: wd-7-long

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   `pivot_wider()`

Lab 4 Question 4

```{r}
#| label: wd-7-wide

# REVISIONS:
# modified to follow tidiness conventions

ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(
    region,
    study_year
    ) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi,
              names_glue = "mhi_{study_year}") |>
  arrange(desc(mhi_2018))

```

## Reproducibility:

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

Labs 1-5:

Challenges 1-3:

In these examples, I demonstrate consistent styling, suppression of unnecessary messages and warnings, as well as prevention of errors.

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

Lab 4 Question 6

```{r}
#| label: r-2-1

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   Example of **dplyr** pipeline

Lab 4 Question 6

```{r}
#| label: r-2-2

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   Example of function formatting

Lab 7 Question 8

```{r}
#| label: r-2-3

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. use {{}} operator
# 2. validate columns are in the dataframe

rescale_column <- function(df, columns) {
  # validate df is a dataframe
  if (!is.data.frame(df)) {
    stop("The input `df` must be a data frame.")
  }
  # validate columns selected are in dataframe
  if (!all(columns %in% colnames(df))) {
    stop("`columns` must be a character vector of valid column names in `df`.")
  }
  # add rescaled columns value
  return(df |>
    mutate(across(
      {{columns}},
      rescale_01,
      .names = "{.col}_rescaled"
      )
    ))
}


```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

Lab 4 Question 5

```{r}
#| label: r-3-example

# REVISIONS:
# robust and resistant to change:
# 1. returns 2018's minimum median even if there are changes in the data set
# 2. slice_min effectively combines the functionality of arrange descending and         picking the top value using slice_head which reduces user input error.

ca_childcare |>
  group_by(region) |>
  filter(study_year == 2018) |>
  summarize(median_price = median(mc_infant,
                               na.rm = TRUE)) |>
  slice_min(median_price)

```

-   Example of function stops

Lab 7 Question 4

```{r}
#| label: r-3-function-stops

rescale_01 <- function(vector){
  if (!is.numeric(vector)) {
    stop("Error: The input vector must be numeric.")
  }
  if (length(vector) <= 1) {
    stop("Error: The input vector must have more than one element.")
  }
  min_max <- range(vector, na.rm = TRUE)
  
  return((vector - min_max[1]) / (min_max[2] - min_max[1]))
}

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

Lab 2 Question 4

```{r}
#| label: dvs-1-num

ggplot(data = survey_csv) +
  geom_point(mapping = aes(x = weight,
                           y = hindfoot_length
                           ),
             alpha = 0.3,
             position = "jitter") + 
  facet_wrap(~species) +
  labs(x = "Weight (g)",
       y = "",
       title = "Relationship Between Hindfoot Length and Weight Across Species in Portal, Arizona",
       subtitle = "Hindfoot Length (mm)")

```

-   at least one numeric variable and one categorical variable

Lab 2 Question 16

```{r}
#| label: dvs-2-num-cat

# modified to follow tidiness conventions

ggplot(data = survey_csv,
       mapping = aes(
         y = species,
         x = weight
         )) +
  geom_jitter(
    color = "orange3",
    alpha = 0.7,
    show.legend = FALSE
    ) +
  geom_boxplot(outlier.alpha = 0) +
  labs(
    x = "Weight (g)",
    y = " ",
    title = "Comparison of Weight Distribution Across Different Species of Rodent from Portal, Arizona"
  )

```

-   at least two categorical variables

Lab 3 Challenge 2

```{r}
#| label: dvs-2-cat

ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level,
                     fill = SET_level)) +
  geom_bar(position = "stack") +
  labs(
    x = "Seniority of Instructor",
    y = " ",
    subtitle = " Number of Sections",
    legend = "Rating",
    fill = "SET level",
  ) +
  scale_fill_manual(values = c("steelblue","darkgoldenrod3"))

```

-   dates (timeseries plot)

Lab 4 Question 6

```{r}
#| label: dvs-2-date

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

Lab 2 Question 16

```{r}
#| label: dvs-2-1

# REVISIONS:
# modified to follow tidiness conventions

ggplot(data = survey_csv,
       mapping = aes(
         y = species,
         x = weight
         )) +
  geom_jitter(
    color = "orange3",
    alpha = 0.7,
    show.legend = FALSE
    ) +
  geom_boxplot(outlier.alpha = 0) +
  labs(
    x = "Weight (g)",
    y = " ",
    title = "Comparison of Weight Distribution Across Different Species of Rodent from Portal, Arizona"
  )

```

-   I can modify the text in my plot to be more readable

Lab 4 Question 6

```{r}
#| label: dvs-2-2

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(age_group = factor(age_group,
                            levels = c("mc_infant", "mc_toddler", "mc_preschool"),
                            labels = c("Infant", "Toddler", "Preschool"))) |>
  # Graphing 
  ggplot(mapping = aes(x = study_year,
                       y = price_per_week,
                       color = region)) +
  geom_point(position = "jitter",
             alpha = 0.5) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6))
  )

```

-   I can reorder my legend to align with the colors in my plot

Lab 4 Question 6

```{r}
#| label: dvs-2-3

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. plot color reordering,
# 2. factor with forcats
# 3. fix text size issues

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(
    age_group = fct_recode(
      age_group,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"
    ),
   age_group = fct_relevel(
     age_group,
     "Infant",
     "Toddler",
     "Preschool"
    )
   ) |>
  # Graphing 
  ggplot(mapping = aes(
    x = study_year,
    y = price_per_week,
    color = fct_reorder2(
      .f = region,
      .x = study_year,
      .y = price_per_week
    )
  )) +
  geom_point(position = "jitter",
             alpha = 0.5,
             size = 0.8) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)",
    color = "California Region"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6)),
    plot.title = element_text(size = 12)
  )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

Challenge 2 Question 2

```{r}
#| label: dvs-3-1

# REVISIONS:
# modified to follow tidiness conventions

ggplot(data = survey_csv) +
  geom_density_ridges(
    mapping = aes(
      x = weight,
      y = species,
      fill = species),
    alpha = 0.5
    ) +
  scale_fill_viridis_d() +
  labs(
    x = "Species",
    y = " ",
    subtitle = "Weight (g)",
    title = "Comparison of Weight Distribution Across Species from Portal, Arizona"
  )

```

-   I can use annotations

Lab 7 Question 2

```{r}
#| label: dvs-3-2

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. plot readability
# 2. Trip variable recoding
# 3. make labels easier to read

# Additionally modified to better fit DVS-3 requirements

fish_csv |>
  mutate(
    trip = fct_recode(as.factor(trip),
      "Trip 1" = "1",
      "Trip 2" = "2"
    )
  ) |>
  filter(
    if_any(everything(), is.na)
  ) |>
  ggplot(
    mapping = aes(
      x = year,
      fill = section
    )
  ) +
  geom_bar(
    stat = "count",
    position = "stack"
  ) +
  facet_wrap(~ trip) +
  labs(
    x = "Year",
    y = "",
    subtitle = "Section",
    # reference for str_wrap: https://www.rdocumentation.org/packages/stringr/versions/1.4.0/topics/str_wrap
    title = str_wrap("Number of Missing Values by Section and Trip Over Time from the Blackfoot Trout Data Gathered at Helena, Montana"),
    fill = "Number Missing"

  ) +
  theme(
    axis.text.x = element_text(
      size = 8
    ))


```

-   I can be creative...

```{r}
#| label: dvs-3-3

# REVISION:
# modified to match text color to plot for style and move legend to the bottom to make reading and comparing the trips easier.

fish_csv |>
  mutate(
    trip = fct_recode(as.factor(trip),
      "Trip 1" = "1",
      "Trip 2" = "2"
    )
  ) |>
  filter(
    if_any(everything(), is.na)
  ) |>
  ggplot(
    mapping = aes(
      x = year,
      fill = section
    )
  ) +
  geom_bar(
    stat = "count",
    position = "stack"
  ) +
  facet_wrap(~ trip) +
  labs(
    x = "Year",
    y = "",
    subtitle = "Section",
    # reference for str_wrap: https://www.rdocumentation.org/packages/stringr/versions/1.4.0/topics/str_wrap
    title = str_wrap("Number of Missing Values by Section and Trip Over Time from the Blackfoot Trout Data Gathered at Helena, Montana"),
    fill = "Number Missing"

  ) +
  theme(
    axis.text.x = element_text(
      size = 8
    ),
    plot.title = element_text(
      size = 12,
      face = "bold",
      color = "salmon"
    ),
    strip.text = element_text(
      size = 12,
      face = "bold",
      color = "salmon"
    ),
    legend.position = "bottom",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
    )

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

Lab 7 Question 1

```{r}
#| label: dvs-4-summarize

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. modified to output a table where each column has the number of missing values

fish_csv |>
  summarise(
    across(
      everything(),
      ~ sum(is.na(.))
    )
  ) 

```

-   Example using `across()`

Lab 7 Question 1

```{r}
#| label: dvs-4-across

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. modified to output a table where each column has the number of missing values

fish_csv |>
  summarise(
    across(
      everything(),
      ~ sum(is.na(.))
    )
  ) 

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

Lab 4 Question 4

```{r}
#| label: dvs-5-1


ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(median_mhi = median(mhi_2018,
                                na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi,
              names_glue = "mhi_{study_year}") |>
  arrange(desc(mhi_2018))

```

-   Example 2

Lab 3 Question 9

```{r}
#| label: dvs-5-2

# REVISIONS:
# modified name to be unique_teacher_courses (from teacher_course)

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(question_count = n_distinct(question_no), .groups = "drop") |>
  filter(question_count == 9) |>
  count() |>
  rename(unique_teacher_course = n)

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

lab 3 Question 6

```{r}
#| label: dvs-6-1


teacher_evals_clean |>
  summarise(unique_teachers = n_distinct(teacher_id),
            unique_courses = n_distinct(course_id),
            unique_combinations = n_distinct(course_id,teacher_id))

```

-   Example 2

lab 3 Question 9

```{r}
#| label: dvs-6-2

# REVISIONS:
# modified name to be unique_teacher_courses (from teacher_course)

teacher_evals_clean |>
  group_by(course_id, teacher_id) |>
  summarise(question_count = n_distinct(question_no), .groups = "drop") |>
  filter(question_count == 9) |>
  count() |>
  rename(unique_teacher_course = n)

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. better column names

# modified to follow tidiness conventions
# modified to better denmonstrate requirement

tibble(
  Variable = names(fish),
  Missing_Value_Count = map_int(
    fish,
    ~ sum(is.na(.))
  )
) |>
# referenced: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html#Column__Row_Specification
kable(
  caption = "Missing data summary of blackfoot fish data set"
) |>
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) |>
kable_classic(full_width = F) |>
column_spec(1, bold = TRUE, border_right = TRUE)



```

-   Example 2

Lab 4 Question 4

```{r}
#| label: dvs-7-2

# REVISIONS:
# modified to better denmonstrate requirement


mhi_data <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_mhi = median(mhi_2018,
                                na.rm = TRUE),
    .groups = "drop"
    ) |>
  ungroup() |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi,
              names_glue = "median_income_{study_year}") |>
  arrange(desc(median_income_2018))


mhi_data |>
  kable(
    caption = "Median household incomes by California region in descending order based on 2018"
  ) |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) |>
  column_spec(1, bold = TRUE, border_right = TRUE) |>
  column_spec(2,
              background = if_else(
                mhi_data$median_income_2008  > mean(mhi_data$median_income_2008),
                "darkgreen",
                "darkred"
              ))|>
  column_spec(3,
              background = if_else(
                mhi_data$median_income_2018  > mean(mhi_data$median_income_2018),
                "darkgreen",
                "darkred"
              ))
  

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

Lab 5 (Find who hired the suspect step)

```{r}
#| label: pe-1-one-call

# REVISIONS:
# modified to meet efficiency conventions

# Exemplified by filter function

employer_id <- person |>
  inner_join(
    facebook_event_checkin,
    join_by(id == person_id)
  ) |>
  left_join(
    drivers_license,
    join_by(license_id == id)
  ) |>
  filter(
    gender == "female",
    height %in% 65:67,
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(ymd(date)) == 12,
    year(ymd(date)) == 2017
  ) |>
  group_by(id) |>
  summarize(concert_count = n()) |>
  filter(concert_count == 3) |>
  pull(id)


```

-   `across()`

Lab 7 Question 1

```{r}
#| label: pe-1-across

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. modified to output a table where each column has the number of missing values

fish_csv |>
  summarise(
    across(
      everything(),
      ~ sum(is.na(.))
    )
  ) 


```

-   `map()` functions

Lab 8 Question 4

```{r}
#| label: pe-1-map-1

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. better column names

# modified to follow tidiness conventions

tibble(
  Variable = names(fish),
  Missing_Value_Count = map_int(
    fish,
    ~ sum(is.na(.))
  )) |>
kable() |>
kable_styling() |>
row_spec(1)

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

Lab 7 Question 4

```{r}
#| label: pe-2-1

rescale_01 <- function(vector){
  if (!is.numeric(vector)) {
    stop("Error: The input vector must be numeric.")
  }
  if (length(vector) <= 1) {
    stop("Error: The input vector must have more than one element.")
  }
  min_max <- range(vector, na.rm = TRUE)
  
  return((vector - min_max[1]) / (min_max[2] - min_max[1]))
}

```

-   Function that operates on data frames

Lab 7 Question 8

```{r}
#| label: pe-2-2

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. use {{}} operator
# 2. validate columns are in the dataframe

rescale_column <- function(df, columns) {
  # validate df is a dataframe
  if (!is.data.frame(df)) {
    stop("The input `df` must be a data frame.")
  }
  # validate columns selected are in dataframe
  if (!all(columns %in% colnames(df))) {
    stop("`columns` must be a character vector of valid column names in `df`.")
  }
  # add rescaled columns value
  return(df |>
    mutate(across(
      {{columns}},
      rescale_01,
      .names = "{.col}_rescaled"
      )
    ))
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

Lab 7 Question 1

```{r}
#| label: pe-3-across

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. modified to output a table where each column has the number of missing values

fish_csv |>
  summarise(
    across(
      everything(),
      ~ sum(is.na(.))
    )
  ) 

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

Lab 8 Question 4

```{r}
#| label: pe-3-map-1

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. better column names

# modified to follow tidiness conventions

tibble(
  Variable = names(fish),
  Missing_Value_Count = map_int(
    fish,
    ~ sum(is.na(.))
  )) |>
kable() |>
kable_styling() |>
row_spec(1)

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2



```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

Lab 7 Question 2

```{r}
#| label: pe-4-1

# REVISIONS:
# modified to resolve the "growing" changes requested:
# 1. plot readability
# 2. Trip variable recoding
# 3. make labels easier to read

# Additionally modified to better fit DVS-3 requirements

fish_csv |>
  mutate(
    trip = fct_recode(as.factor(trip),
      "Trip 1" = "1",
      "Trip 2" = "2"
    )
  ) |>
  filter(
    if_any(everything(), is.na)
  ) |>
  ggplot(
    mapping = aes(
      x = year,
      fill = section
    )
  ) +
  geom_bar(
    stat = "count",
    position = "stack"
  ) +
  facet_wrap(~ trip) +
  labs(
    x = "Year",
    y = "",
    subtitle = "Section",
    # reference for str_wrap: https://www.rdocumentation.org/packages/stringr/versions/1.4.0/topics/str_wrap
    title = str_wrap("Number of Missing Values by Section and Trip Over Time from the Blackfoot Trout Data Gathered at Helena, Montana"),
    fill = "Number Missing"

  ) +
  theme(
    axis.text.x = element_text(
      size = 8
    ))

```

-   I can connect a data wrangling pipeline into a `ggplot()`

Lab 4 Question 6

```{r}
#| label: pe-4-2

# REVISIONS:
# modified to relect the "growing" changes requested:
# 1. plot color reordering,
# 2. factor with forcats
# 3. fix text size issues

ca_childcare |>
  # Data cleaning
  filter(!is.na(mc_infant),
         !is.na(mc_toddler),
         !is.na(mc_preschool)) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_group",
               values_to = "price_per_week") |>
  mutate(
    age_group = fct_recode(
      age_group,
      "Infant" = "mc_infant",
      "Toddler" = "mc_toddler",
      "Preschool" = "mc_preschool"
    ),
   age_group = fct_relevel(
     age_group,
     "Infant",
     "Toddler",
     "Preschool"
    )
   ) |>
  # Graphing 
  ggplot(mapping = aes(
    x = study_year,
    y = price_per_week,
    color = fct_reorder2(
      .f = region,
      .x = study_year,
      .y = price_per_week
    )
  )) +
  geom_point(position = "jitter",
             alpha = 0.5,
             size = 0.8) +
  geom_smooth(method = "loess",
              alpha = 0.5) +
  facet_wrap(~ age_group) +
  labs(
    x = "Study Year",
    y = " ",
    title = "Weekly Median Price for Center-Based Children ($)",
    color = "California Region"
  ) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  scale_y_continuous(limits = c(100, 500),
                     labels = label_currency(prefix = "$", # adding $ to y-axis labels
                                             accuracy = 1)) +
  # Courtesy of GPT: https://chatgpt.com/share/67144915-af68-8009-9a21-ee75e0fbca42
  theme(
    strip.background = element_rect(color = "black"),
    panel.border = element_rect(color = "black", fill = NA),
    aspect.ratio = 1.1,
    axis.text = element_text(size = 6),
    legend.text = element_text((size = 6)),
    plot.title = element_text(size = 12)
  )

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

Lab 2 Question 8

```{r}
#| label: dsm-1-1

# REVISIONS:
# modified code to better fit requirements:
# 1. collected mean and sd of original data
# 2. simulated based on those stats in a normally distributed set of points

set.seed(93401)

survey_csv |>
  group_by(species) |>
  summarise(mean_weight = mean(weight),
            # reference: https://www.digitalocean.com/community/tutorials/find-standard-deviation-in-r
            sd_weight = sd(weight)) |>
  # reference: https://dplyr.tidyverse.org/articles/rowwise.html
  rowwise() |>
  mutate(simulated_weights = list(rnorm(1000, mean = mean_weight, sd = sd_weight))) |>
  unnest(simulated_weights) |>
  ggplot(mapping = aes(x = species, y = simulated_weights)) +
  geom_jitter(color = "orange3",
              alpha = 0.7,
              show.legend = FALSE) +
  geom_boxplot(outlier.alpha = 0) +
  # reference: https://chatgpt.com/share/6701f393-3234-8009-bc09-a0e39637ee14
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(
    x = "Species",
    y = " ",
    subtitle = "Weight (g)",
    title = "Comparison of Weight Distribution Across Different Species of Rodent from Portal, Arizona"
  )

```

-   Example 2

```{r}
#| label: dsm-1-2

# NEW:
# created own example based on the lab 3 teacher_evals data set
# Simulate teacher evaluation data

# Get  stats on numeric values
teacher_evals_clean |>
  summarise(
      min_teacher_id = min(as.numeric(teacher_id), na.rm = TRUE),
      max_teacher_id = max(as.numeric(teacher_id), na.rm = TRUE),
      min_participants = min(no_participants, na.rm = TRUE),
      max_participants = max(no_participants, na.rm = TRUE),
      mean_participants = mean(no_participants, na.rm = TRUE),
      sd_participants = sd(no_participants, na.rm = TRUE),
      min_resp_share = min(resp_share, na.rm = TRUE),
      max_resp_share = max(resp_share, na.rm = TRUE),
      mean_resp_share = mean(resp_share, na.rm = TRUE),
      sd_resp_share = sd(resp_share, na.rm = TRUE),
      min_SET_score_avg = min(SET_score_avg, na.rm = TRUE),
      max_SET_score_avg = max(SET_score_avg, na.rm = TRUE),
      mean_SET_score_avg = mean(SET_score_avg, na.rm = TRUE),
      sd_SET_score_avg = sd(SET_score_avg, na.rm = TRUE),
      min_percent_failed_cur = min(percent_failed_cur, na.rm = TRUE),
      max_percent_failed_cur = max(percent_failed_cur, na.rm = TRUE),
      mean_percent_failed_cur = mean(percent_failed_cur, na.rm = TRUE),
      sd_percent_failed_cur = sd(percent_failed_cur, na.rm = TRUE)
    ) 
set.seed(1123)
# simulate based on stats
tibble(
  teacher_id = sample(3422:110292, 500),
  participants = runif(n = 500, min = 10, max = 1003),
  resp_share = runif(n = 500, min = 0.003484321, max = 0.95),
  SET_score_avg = rnorm(n = 500, mean = 4.37426, sd = 0.7844497),
  percent_failed_cur = rnorm(n = 500, mean = 0.1289149, sd = 0.1494496)
)

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

Lab 2 Question 17

```{r}
#| label: dsm-2-1

species_mod <- aov(weight ~ species, data = survey_csv)

```

-   Example 2

Challenge 3 Question 3

```{r}
#| label: dsm-2-2

# REVISIONS:
# modified to better fit efficiency conventions

chisq.test(
  x = teacher_evals_compare$SET_level,
  y = teacher_evals_compare$sen_level
  )

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, I had to constantly make adjustments to how I was approaching problems and how I was styling my work to make consistent professional documents. To fulfill some categories, I had to look back to older labs and challenges and bring in more recent learnings to make them better or to exemplify skills, which further enhanced my understanding of course materials. For example, I built off lab 2 and simulated rodent data based off of the given, creating a similar graph.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Revisions are indicated by "REVISIONS:" followed by notes of what was changed between the original lab or challenges to the portfolio.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking through challenge activities, assignments and in the creation of this portfolio. I attempted many challenge problems and in particular, I completed all of the Challenge 7 problems by creating robust functions with stop blocks to use to make a visually engaging graph.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Feedback:

\`ggplot(data = surveys, \

mapping = aes(x = weight,\

y = hindfoot_length\

)\

) +\

geom_point(alpha = 0.5) +\

facet_wrap(\~species_id) +\

labs(x = "Weight of Animal (in grams)",\

y = "",\

title = "Relationship Between Animal Body Weight and Hindfoot\

Length Across Different Species", \

subtitle = "Length of Hindfoot (in mm)"\

)\

\

Overall, you did a great job with the formatting. I appreciate you using line spacing after the +’s and ,’s and great job using named variables everywhere. The only thing I would change is when having a newline after commas, I’d have the arguments aligned. For example:\

… \

mapping = aes(x = weight, \

y = hindfoot_length\

)\

…\

\

And if you have multiple )’s in a row, I feel like it isn’t necessary to do a newline, but either way the tidiness is very good!\

\

ggplot(data = surveys, \

mapping = aes(x = species_id, \

y = weight\

)\

) + \

geom_boxplot(outliers = FALSE) +\

geom_jitter(\

color = "orange", \

alpha = 0.5\

) +\

labs(x = "Species", \

y = "Weight of Animal (in grams)", \

title = "Comparing Animal Weight Distributions Across Species")\

\

Overall, same thing as before! Great formatting both in tidiness and efficiency in the spacing, newlines and using name variables. I would just recommend putting the current y axis label as a subtitle and changing the y axis label to be “ “.\`

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

At first it was a struggle to stay within roles because I'm always trying to think of ideas and solutions that I want to rush and try. But as the weeks went on, I learned to take a step back and let others speak first which often led to more creative solutions overall and expanded my depth of knowledge in the course.
